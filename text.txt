in server folder:

- need to use npm init -y to use npm libraries to create backend

- npm init -y
- npm i body-parser cors express mongoose nodemon

- change server/package.json to include "start": "nodemon index.js" and "type": "module" to indicate where the server should run and to be able to import express instead of declaring a const

body-parser:

- enables us to send POST requests

cors: 

- enables cross origin requests

express:

- used as a framework for creating the routing of application

mongoose:

- create models for our posts

nodemon:

- don't have to reset server after changes


1. First setup server folder with index.js and import all required libraries.
Then add boilerplate express code to get server running. Connect mongoose to application.

2. Add routes folder where will write all routes, import, and connect them to server/index.js

3. Add controllers folder and create methods(handlers) for routes.

4. Create server/models folder and use mongoose to create Schemas

5. Create src/api and import axios to start calling APIs

6. Use Redux to manage actions towards our backend and dispatch those actions
- create actions and reducers folders, then go to root index.js and import dependencies

7. A reducer is a function that accepts state, and action. Based on the action type, it will do some logic
- <Provider store={store} is to connect redux 


Structure to add CRUD
- go to routes folder and add request to express router, and import it from the controllers
- then go to controllers and add controller function to update the post 

- now go to front end: 
    - update api folder first 
    - then update the action folder
    - then update the reducer 


- create constants folder for Redux to help with error debugging




How do we give signed in users access to CRUD their data?
- use middleware
- create middleware folder in the server and import jwt
- create middleware functions
- use middleware in the routes/posts.js
- add auth before routes you only want to execute for an authenticated user

- add likes to Post in the postMessage model 
- type will be string of arrays
- default array

Now go to front end
- go to actions folder 
- add logic to login the user now that we have backend endpoints
- create api endpoints 
- got to api/index.js
- add API const 


REDUX WORKFLOW
- 1st we get to the form which is a component in the auth
- once we fill in all of the inputs we want to dispatch an action
- then come to actions folder and dispatch the action 
- this is the logic in signin and signup consts 
- this action makes a call to our api in api/index.js where we make POST request for data
- we destructure that data in our actions/auth.js 
- now we can dispatch the data as an action and pass it to our reducer 




If token expired, log user out:
- go to Navbar and in useEffect, check if token is expired
- if(token)
- import decode from jwt 